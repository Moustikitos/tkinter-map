{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tkmap widget Efficient web map canvas for tkinter. Install Version 0.1 python -m pip install tkinter-map Developpment version python -m pip install git+https://github.com/Moustikitos/tkinter-map.git@master Requirement If you plan to use Tkmap widget with map providers sending JPEG-based tiles, it is recommended to install the tcl package tkimg . Binaries can be extracted in .tcl directory at the root of tkmap package (ie the one containing the __init__.py module). Use >>> from tkmap import widget, model >>> canvas = widget.Tkmap() >>> canvas.pack(fill=\"both\", expand=True) >>> canvas.open(model.OpenStreetMap(), zoom=10, location=(48.645272, 1.841411)) Features [x] Tile set: [x] Google map [x] Google satellite [x] Open Street map [x] Mapbox satellite [x] Custom map [x] Zoom, pan and fast pan mouse action [x] Latitude longitude pixel location [x] Tile caching Ongoing work [ ] Location format and projection","title":"Home"},{"location":"#tkmap-widget","text":"Efficient web map canvas for tkinter.","title":"Tkmap widget"},{"location":"#install","text":"","title":"Install"},{"location":"#version-01","text":"python -m pip install tkinter-map","title":"Version 0.1"},{"location":"#developpment-version","text":"python -m pip install git+https://github.com/Moustikitos/tkinter-map.git@master","title":"Developpment version"},{"location":"#requirement","text":"If you plan to use Tkmap widget with map providers sending JPEG-based tiles, it is recommended to install the tcl package tkimg . Binaries can be extracted in .tcl directory at the root of tkmap package (ie the one containing the __init__.py module).","title":"Requirement"},{"location":"#use","text":">>> from tkmap import widget, model >>> canvas = widget.Tkmap() >>> canvas.pack(fill=\"both\", expand=True) >>> canvas.open(model.OpenStreetMap(), zoom=10, location=(48.645272, 1.841411))","title":"Use"},{"location":"#features","text":"[x] Tile set: [x] Google map [x] Google satellite [x] Open Street map [x] Mapbox satellite [x] Custom map [x] Zoom, pan and fast pan mouse action [x] Latitude longitude pixel location [x] Tile caching","title":"Features"},{"location":"#ongoing-work","text":"[ ] Location format and projection","title":"Ongoing work"},{"location":"bio/","text":"tkmap.bio Basic input/output module. TileWorker Objects class TileWorker(threading.Thread) Tile downloader daemon. It gets data from sqlite database or from url request if not found. It works with two LIFO queues. TileWorker is a subclass of threading.Thread , it is set as a daemon on initialization and starts immediately. Attributes : timeout int - (class attribute) timeout delay when tile data is requested from url. opener urllib.request.OpenerDirector - (class attribute) url opener used by all TileWorker intances. It is set only with the first class instanciation. job queue.Queue - queue from where tile tag and map model. result queue.Queue - queue where tile tag and data are pushed into. db_name str - database base name. stop threading.Event - event used to stop forever loop. __init__ def __init__(job: queue.Queue, result: queue.Queue, db_name: str) -> None Arguments : job queue.Queue - queue from where tile tag and map model. result queue.Queue - queue where tile tag and data are pushed into. db_name str - database base name. kill def kill() -> None Stop the forever loop run def run() -> None Forever loop get def get(url: str, headers: dict = {}) -> str Download tile from server. Arguments : url str - tile ressource location. headers dict - headers used in request. Returns : str - base64-encoded data. Database Objects class Database() sqlite3 database implementation used for tile caching. __init__ def __init__(name: str) -> None Arguments : name str - database name. Database is created in the tkmap.MAPS folder with \u201c.sqlm\u201d extention. get def get(zoom: int, row: int, col: int) -> Union[str, bool] Get a tile from database using row, column and zoom parameters. Arguments : zoom int - tile set zoom level. row int - tile set row. col int - tile set column. Returns : str | bool: base64-encoded data if any tile found else False put def put(zoom: int, row: int, col: int, data: str) -> None Set tile data in database with row, column and zoom informations. Arguments : zoom int - tile set zoom level. row int - tile set row. col int - tile set column. data str - base64-encoded string. close def close() -> None Save and close database.","title":"Basic input/output"},{"location":"bio/#tkmapbio","text":"Basic input/output module.","title":"tkmap.bio"},{"location":"bio/#tileworker-objects","text":"class TileWorker(threading.Thread) Tile downloader daemon. It gets data from sqlite database or from url request if not found. It works with two LIFO queues. TileWorker is a subclass of threading.Thread , it is set as a daemon on initialization and starts immediately. Attributes : timeout int - (class attribute) timeout delay when tile data is requested from url. opener urllib.request.OpenerDirector - (class attribute) url opener used by all TileWorker intances. It is set only with the first class instanciation. job queue.Queue - queue from where tile tag and map model. result queue.Queue - queue where tile tag and data are pushed into. db_name str - database base name. stop threading.Event - event used to stop forever loop.","title":"TileWorker Objects"},{"location":"bio/#__init__","text":"def __init__(job: queue.Queue, result: queue.Queue, db_name: str) -> None Arguments : job queue.Queue - queue from where tile tag and map model. result queue.Queue - queue where tile tag and data are pushed into. db_name str - database base name.","title":"__init__"},{"location":"bio/#kill","text":"def kill() -> None Stop the forever loop","title":"kill"},{"location":"bio/#run","text":"def run() -> None Forever loop","title":"run"},{"location":"bio/#get","text":"def get(url: str, headers: dict = {}) -> str Download tile from server. Arguments : url str - tile ressource location. headers dict - headers used in request. Returns : str - base64-encoded data.","title":"get"},{"location":"bio/#database-objects","text":"class Database() sqlite3 database implementation used for tile caching.","title":"Database Objects"},{"location":"bio/#__init___1","text":"def __init__(name: str) -> None Arguments : name str - database name. Database is created in the tkmap.MAPS folder with \u201c.sqlm\u201d extention.","title":"__init__"},{"location":"bio/#get_1","text":"def get(zoom: int, row: int, col: int) -> Union[str, bool] Get a tile from database using row, column and zoom parameters. Arguments : zoom int - tile set zoom level. row int - tile set row. col int - tile set column. Returns : str | bool: base64-encoded data if any tile found else False","title":"get"},{"location":"bio/#put","text":"def put(zoom: int, row: int, col: int, data: str) -> None Set tile data in database with row, column and zoom informations. Arguments : zoom int - tile set zoom level. row int - tile set row. col int - tile set column. data str - base64-encoded string.","title":"put"},{"location":"bio/#close","text":"def close() -> None Save and close database.","title":"close"},{"location":"model/","text":"tkmap.model MapModel Objects class MapModel() get_tile_url def get_tile_url(row: int, col: int, zoom: int) -> str Return tile url from row, column and zoom.","title":"Model"},{"location":"model/#tkmapmodel","text":"","title":"tkmap.model"},{"location":"model/#mapmodel-objects","text":"class MapModel()","title":"MapModel Objects"},{"location":"model/#get_tile_url","text":"def get_tile_url(row: int, col: int, zoom: int) -> str Return tile url from row, column and zoom.","title":"get_tile_url"},{"location":"widget/","text":"tkmap.widget This module provides the core widget of tkmap package. Tile Objects class Tile() Tile class to leverage the tcl interpreter to perform fast image operation on canvas. Attributes : TILE_CMD_CREATE str - (class attribute) tcl command pattern to create the image canvas item. TILE_CMD_SHOW str - (class attribute) tcl command pattern to show the image canvas item. TILE_CMD_HIDE str - (class attribute) tcl command pattern to hide the image canvas item. TILE_CMD_CLEAR str - (class attribute) tcl command pattern to delete the image data. tkeval callable - (class attribute) the tk eval command. tkcall callable - (class attribute) the tk call command. w_name str - master canvas name. __init__ def __init__(master: tkinter.Canvas) -> None Arguments : master tkinter.Canvas - master canvas instance on wich tile is about to be managed. create def create(tag: str, data: str) -> None Create the image data inside tcl interpreter and generate the associated canvas image-item. Arguments : tag str - tile tag with format {zoom}_{row}_{col} . data str - image data as string. show def show() -> None Reveal the image item on the canvas. hide def hide() -> None Hide the image item from the canvas. clear def clear() -> None Delete the image item from canvas and image data from tcl interpreter. Tkmap Objects class Tkmap(tkinter.Canvas) Tkmap is a tkinter.Canvas object that leverages directly tcl code to provide a smooth user experience. Attributes : coords tkinter.Label - widget to display map coordinates. framerate int - rate of canvas update. cachesize int - number of tile stored in Tkmap cache. cache dict - tile cache. mapmodel model.MapMode - map model used to generate tile url and compute map coordinates. workers List[bio.TileWorker] - List of python thread used to perform tile downloads or database queries. bbox @property def bbox(obj) -> tuple Returns west, north, east and south boundaries view on canvas area. place_widget def place_widget(widget: str, cnf={}, **kw) -> None Place inner widgets on the canvas instance. Arguments : widget str - widget attribute name to place. cnf dict - key-value pairs to place the widget. **kw - keywords arguments to place the widget. dump_location def dump_location() -> None Drops cursor location into filesystem save_coords def save_coords(x: float = None, y: float = None) -> None Save map coordinates from canvas center or specific coordinates Arguments : x float - horizontal pixel coordinates. y float - vertical pixel coordinates. load_location def load_location() -> None loads last saved location from filesystem open def open(model: model.MapModel, zoom: int = None, location: List[float] = None) -> None Open a map. Arguments : model model.MapModel - map tile provider. zoom int - zoom level to start at. If not provided, starts to 0 or previously saved zoom level. location List[float] - location to start at. If not provided, starts at longitude 0 and latitude 0 or previously saved location. close def close() -> None Close the map and clear the canvas. center def center(px: float = None, py: float = None) -> None Align canvas center or coordinates to the last saved coordinates. Arguments : px float - horizontal pixel coordinates. py float - vertical pixel coordinates.","title":"Widgets"},{"location":"widget/#tkmapwidget","text":"This module provides the core widget of tkmap package.","title":"tkmap.widget"},{"location":"widget/#tile-objects","text":"class Tile() Tile class to leverage the tcl interpreter to perform fast image operation on canvas. Attributes : TILE_CMD_CREATE str - (class attribute) tcl command pattern to create the image canvas item. TILE_CMD_SHOW str - (class attribute) tcl command pattern to show the image canvas item. TILE_CMD_HIDE str - (class attribute) tcl command pattern to hide the image canvas item. TILE_CMD_CLEAR str - (class attribute) tcl command pattern to delete the image data. tkeval callable - (class attribute) the tk eval command. tkcall callable - (class attribute) the tk call command. w_name str - master canvas name.","title":"Tile Objects"},{"location":"widget/#__init__","text":"def __init__(master: tkinter.Canvas) -> None Arguments : master tkinter.Canvas - master canvas instance on wich tile is about to be managed.","title":"__init__"},{"location":"widget/#create","text":"def create(tag: str, data: str) -> None Create the image data inside tcl interpreter and generate the associated canvas image-item. Arguments : tag str - tile tag with format {zoom}_{row}_{col} . data str - image data as string.","title":"create"},{"location":"widget/#show","text":"def show() -> None Reveal the image item on the canvas.","title":"show"},{"location":"widget/#hide","text":"def hide() -> None Hide the image item from the canvas.","title":"hide"},{"location":"widget/#clear","text":"def clear() -> None Delete the image item from canvas and image data from tcl interpreter.","title":"clear"},{"location":"widget/#tkmap-objects","text":"class Tkmap(tkinter.Canvas) Tkmap is a tkinter.Canvas object that leverages directly tcl code to provide a smooth user experience. Attributes : coords tkinter.Label - widget to display map coordinates. framerate int - rate of canvas update. cachesize int - number of tile stored in Tkmap cache. cache dict - tile cache. mapmodel model.MapMode - map model used to generate tile url and compute map coordinates. workers List[bio.TileWorker] - List of python thread used to perform tile downloads or database queries.","title":"Tkmap Objects"},{"location":"widget/#bbox","text":"@property def bbox(obj) -> tuple Returns west, north, east and south boundaries view on canvas area.","title":"bbox"},{"location":"widget/#place_widget","text":"def place_widget(widget: str, cnf={}, **kw) -> None Place inner widgets on the canvas instance. Arguments : widget str - widget attribute name to place. cnf dict - key-value pairs to place the widget. **kw - keywords arguments to place the widget.","title":"place_widget"},{"location":"widget/#dump_location","text":"def dump_location() -> None Drops cursor location into filesystem","title":"dump_location"},{"location":"widget/#save_coords","text":"def save_coords(x: float = None, y: float = None) -> None Save map coordinates from canvas center or specific coordinates Arguments : x float - horizontal pixel coordinates. y float - vertical pixel coordinates.","title":"save_coords"},{"location":"widget/#load_location","text":"def load_location() -> None loads last saved location from filesystem","title":"load_location"},{"location":"widget/#open","text":"def open(model: model.MapModel, zoom: int = None, location: List[float] = None) -> None Open a map. Arguments : model model.MapModel - map tile provider. zoom int - zoom level to start at. If not provided, starts to 0 or previously saved zoom level. location List[float] - location to start at. If not provided, starts at longitude 0 and latitude 0 or previously saved location.","title":"open"},{"location":"widget/#close","text":"def close() -> None Close the map and clear the canvas.","title":"close"},{"location":"widget/#center","text":"def center(px: float = None, py: float = None) -> None Align canvas center or coordinates to the last saved coordinates. Arguments : px float - horizontal pixel coordinates. py float - vertical pixel coordinates.","title":"center"}]}